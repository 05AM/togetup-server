plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.jogijo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

compileJava.options.encoding = 'UTF-8'

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.vladmihalcea:hibernate-types-52:2.17.3'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA
	implementation 'org.apache.httpcomponents:httpcore:4.4.15'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'

	//implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// model struct
	implementation 'org.mapstruct:mapstruct:1.5.4.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.4.Final'

	// security
	implementation('org.springframework.boot:spring-boot-starter-security')

	// DB
	//runtimeOnly ('mysql:mysql-connector-java:8.0.32') //mysql8
	runtimeOnly("com.mysql:mysql-connector-j")
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//implementation'mysql:mysql-connector-java'


	// mybatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'

	// aws s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	//jwt
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//oauth
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// Spring Rest Docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	//chat

	implementation 'org.webjars:sockjs-client:1.1.2'
	implementation 'org.webjars:stomp-websocket:2.3.3-1'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'it.ozimov:embedded-redis:0.7.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.webjars.bower:bootstrap:4.3.1'
	implementation 'org.webjars.bower:vue:2.5.16'
	implementation 'org.webjars.bower:axios:0.17.1'
	implementation 'javax.xml.bind:jaxb-api'
	implementation 'com.google.code.gson:gson:2.8.0'

	// OpenCV
	implementation 'org.openpnp:opencv:4.6.0-0'
	implementation group: 'com.microsoft.onnxruntime', name: 'onnxruntime', version: '1.12.1'
	implementation 'com.google.firebase:firebase-admin:8.0.0'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
	attributes 'encoding': 'UTF-8'
	attributes 'source-highlighter': 'highlightjs' // 선택적으로 하이라이팅 스타일 지정
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	doFirst{
		delete file('src/main/resources/static/docs')
	}
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}